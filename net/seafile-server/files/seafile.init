#!/bin/bash /etc/rc.common

START=98
APP=seafile
EXTRA_HELP="	setup	Runs the setup script
	create_admin	Creates the administrative login
	reset_admin	Alias to create_admin"
EXTRA_COMMANDS="setup create_admin reset_admin"

TOPDIR=/usr/share/seafile
default_ccnet_conf_dir=${TOPDIR}/ccnet
central_config_dir=${TOPDIR}/conf
seaf_controller=/usr/bin/seafile-controller

function validate_ccnet_conf_dir () {
	if [[ ! -d ${default_ccnet_conf_dir} ]]; then
		echo "Error: there is no ccnet config directory."
		echo "Have you run \"/etc/init.d/seafile setup\"?"
		echo ""
		exit -1;
	fi
}

function validate_central_conf_dir () {
	if [[ ! -d ${central_config_dir} ]]; then
		echo "Error: there is no conf/ directory."
		echo "Have you run \"/etc/init.d/seafile setup\"?"
		echo ""
		exit -1;
	fi
}

function read_seafile_data_dir () {
	seafile_ini=${default_ccnet_conf_dir}/seafile.ini
	if [[ ! -f ${seafile_ini} ]]; then
		echo "Error: ${seafile_ini} not found."
		exit 1
	fi
	seafile_data_dir=$(cat "${seafile_ini}")
	if [[ ! -d ${seafile_data_dir} ]]; then
		echo "Your seafile server data directory \"${seafile_data_dir}\" is invalid or doesn't exits."
		echo "Please check it first, or create this directory yourself."
		echo ""
		exit 1;
	fi
}

function test_config() {
	if ! ${seaf_controller} --test \
		-c "${default_ccnet_conf_dir}" \
		-d "${seafile_data_dir}" \
		-F "${central_config_dir}" ; then
		exit 1;
	fi
}

function check_component_running() {
	name=$1
	cmd=$2
	if pid=$(pgrep -f "$cmd" 2>/dev/null); then
		echo "[$name] is running, pid $pid. You can stop it by: "
		echo
		echo "        kill $pid"
		echo
		echo "Stop it and try again."
		echo
		exit
	fi
}

function validate_already_running () {
	if pid=$(pgrep -f "seafile-controller -c ${default_ccnet_conf_dir}" 2>/dev/null); then
		echo "Seafile controller is already running, pid $pid"
		echo
		exit 1;
	fi

	check_component_running "ccnet-server" "ccnet-server -c ${default_ccnet_conf_dir}"
	check_component_running "seaf-server" "seaf-server -c ${default_ccnet_conf_dir}"
	check_component_running "fileserver" "fileserver -c ${default_ccnet_conf_dir}"
	check_component_running "seafdav" "wsgidav.server.run_server"
}

function start_seafile_server () {
	validate_already_running;
	validate_central_conf_dir;
	validate_ccnet_conf_dir;
	read_seafile_data_dir;
	test_config;

	echo "Starting seafile server, please wait ..."

	${seaf_controller} \
		-c "${default_ccnet_conf_dir}" \
		-d "${seafile_data_dir}" \
		-F "${central_config_dir}"

	sleep 3

	# check if seafile server started successfully
	if ! pgrep -f "seafile-controller -c ${default_ccnet_conf_dir}" 2>/dev/null 1>&2; then
		echo "Failed to start seafile server"
		exit 1;
	fi

	echo "Seafile server started"
	echo
}

function stop_seafile_server () {
	if ! pgrep -f "seafile-controller -c ${default_ccnet_conf_dir}" 2>/dev/null 1>&2; then
		echo "Seafile server not running"
	else
		echo "Stopping seafile server ..."
		pkill -SIGTERM -f "seafile-controller -c ${default_ccnet_conf_dir}"
		pkill -f "ccnet-server -c ${default_ccnet_conf_dir}"
		pkill -f "seaf-server -c ${default_ccnet_conf_dir}"
		pkill -f "fileserver -c ${default_ccnet_conf_dir}"
		pkill -f "soffice.*--invisible --nocrashreport"
		pkill -f  "wsgidav.server.run_server"
	fi
}

function restart_seafile_server () {
	stop_seafile_server;
	sleep 2
	start_seafile_server;
}

function start() {
	start_seafile_server;
}

function stop() {
	stop_seafile_server;
}

function restart() {
	restart_seafile_server;
}

function setup() {
	cd "$TOPDIR" && \
		/usr/bin/seafile-admin setup
}

function create_admin() {
	cd "$TOPDIR" && \
		/usr/bin/seafile-admin setup-admin
}

function reset_admin() {
	create_admin
}
